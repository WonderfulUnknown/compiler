以一个简单的C源程序验证你的语法分析器，可以文本方式输出语法树结构，以节点编号输出父子关系，来验证分析器的正确性，如下例：
main()
{
	int a, b;
	if (a == 0)
		a = b + 1;
}
可能的输出为：
0 : Type Specifier,     integer,       Children:
1 : ID Declaration,     symbol: a      Children:
2 : ID Declaration,     symbol: b      Children:
3 : Var Declaration,                   Children: 0    1    2
4 : ID Declaration,     symbol: a      Children:
5 : Const Declaration,  value:0,       Children:
6 : Expr,               op: ==,        Children: 4    5
7 : ID Declaration,     symbol: a      Children:
8 : ID Declaration,     symbol: b      Children:
9 : Const Declaration,  value:1,       Children:
10: Expr,               op: +,         Children: 8    9
11: Expr,               op: =,         Children: 7    10
12: if statement,                      Children: 6    11
13: compound statement,                Children: 3	  12

实现类型检查模块：
在上一次作业构造的语法树上进行
后序遍历，实现类型检查、结果类型赋值等，
然后打印出语法树，
对每个结点打印类型信息（类型错误）。

problem:
1.行号linenoo失败（目前仅考虑回车时行号++
3.代码生成有误
4.标签添加，临时变量生成

未处理<<endl

.486

.model flat,stdcall

include \masm32\include\msvcrt.inc
includelib \masm32\lib\msvcrt.lib

.data
    a dd 0  
    b dd 1
    i dd 1
    t dd ?
    n dd ?
    tip db   13,10,'Press any key to continue...',13,10,0
    input db 'please input a number:',0
    output db 'the Fibonacci sequence is:',0
    data1 db '%d',0
    _enter db 13,10,0
.code

start:
    invoke crt_printf,addr input
    invoke crt_scanf,addr data1,addr n
    invoke crt_printf,addr output
    invoke crt_printf,addr _enter
    invoke crt_printf,addr data1,a
    invoke crt_printf,addr _enter
    invoke crt_printf,addr data1,b
    mov ecx,i
    cmp ecx,n
    jl again
    jmp _exit
again:
    mov eax,b
    mov t,eax
    mov eax,b
    add eax,a
    mov b,eax
    invoke crt_printf,addr _enter
    invoke crt_printf,addr data1,b
    mov eax,t     
    mov a,eax
    inc i
    mov ecx,i
    cmp ecx,n
    jl again
    jmp _exit
  ret
  _exit:
    invoke crt_printf,addr tip
    invoke crt__getch  
    invoke crt__exit, 0
  end start